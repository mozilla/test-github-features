name: 'Docker Build'
description: 'Builds docker image'
inputs:
  node_env:
    required: false
    description: "Node environment"
    default: "production"
  latest:
    required: false
    description: "Tag latest version"
    default: "false"

outputs:
  tags:
    description: "The Docker tags for the image"
    value: ${{ steps.meta.outputs.tags }}
  version:
    description: "The version for the image"
    value: ${{ steps.meta.outputs.version }}
  image:
    description: "The Docker image"
    value: ${{ steps.image.outputs.image }}
  tag:
    description: "Combines image and version to a valid image tag"
    value: ${{ steps.tag.outputs.tag }}

runs:
  using: "composite"
  steps:
    # Setup docker to build for multiple architectures
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        buildkitd-flags: --debug

    - name: Docker Image
      id: image
      shell: bash
      run: |
        echo "image=${{ github.repository }}" >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.image.outputs.image }}
        flavor: |
          suffix=-next,onlatest=true
          latest=${{ inputs.latest == 'true' }}
        tags: |
          type=ref,event=pr
          type=ref,event=branch
          type=ref,event=tag

    - name: Docker tag
      id: tag
      shell: bash
      run: |
        # Extract metadata output json
        cat <<EOF > meta.json
        ${{ steps.meta.outputs.json }}
        EOF

        tag=$(cat meta.json | jq -r '.tags[0]')
        tag_cache="$tag-cache"

        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "tag_cache=$tag_cache" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT

    - name: Tar file
      id: tar
      shell: bash
      run: |
        echo "path=/tmp/${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Build Image
      id: build
      uses: docker/bake-action@v4
      env:
        DOCKER_TAG: ${{ steps.tag.outputs.tag }}
      with:
        targets: app
        load: true
        set: |
          *.output=type=docker,dest=${{ steps.tar.outputs.path }}

    - name: Get image digest
      id: digest
      shell: bash
      run: |
        echo '${{ steps.build.outputs.metadata }}' > metadata.json
        echo "digest=$(cat metadata.json | jq -r '.app."containerimage.digest"')" >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.meta.outputs.version }}
        path: ${{ steps.tar.outputs.path }}
        retention-days: 1
        compression-level: 9
        overwrite: true
