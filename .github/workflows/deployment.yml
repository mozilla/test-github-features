name: Deployment (notifications)

on:
  deployment_status:
jobs:
  pre_deployment:
    runs-on: ubuntu-latest
    if: |
      github.event.deployment_status.state == 'pending' ||
      github.event.deployment_status.state == 'in_progress'
    steps:
      - name: Notify (attempt)
        uses: ./.github/actions/slack
        with:
          message: "deploying ${{ github.event.deployment_status.log_url }} to ${{ github.event.deployment_status.environment }} :rocket:"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  post_deploment:
    runs-on: ubuntu-latest
    if: |
      github.event.deployment_status.state == 'success' ||
      github.event.deployment_status.state == 'failure' ||
      github.event.deployment_status.state == 'error'
    steps:
      - id: status
        shell: bash
        run: |
          if [[ "${{ github.event.deployment_status.state }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.deployment_status.state }}" == "failure" || "${{ github.event.deployment_status.state }}" == "error" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v2
      - uses: ./.github/actions/context
      - name: Get The PRs associated with the commit
        id: prs
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          data=$(gh api graphql \
            -F owner='${{ github.repository_owner }}' \
            -F name='${{ github.event.repository.name }}' \
            -F ref='${{ github.sha }}' \
            -F query='query($name: String!, $owner: String!, $ref: GitObjectID!) {
                repository(owner: $owner, name: $name) {
                  object(oid: $ref) {
                    ...on Commit {
                      associatedPullRequests(first: 10) {
                        nodes {
                          number
                        }
                      }
                    }
                  }
                }
              }')

          prs=$(echo $data | jq -r '.data.repository.object.associatedPullRequests.nodes[].number')

          echo "prs=$prs" >> $GITHUB_OUTPUT
          echo "prs $prs"
          echo "data $data"

      - name: Create Comment Text
        id: comment
        shell: bash
        run: |
          touch comment.txt

          environment='${{ github.event.deployment_status.environment}}'
          environment_url='${{ github.event.deployment_status.environment_url }}'
          commit_url='${{ github.server_url}}/${{ github.repository}}/commit/${{ github.sha }}'
          created_at='${{ github.event.deployment_status.created_at }}'
          updated_at='${{ github.event.deployment_status.updated_at }}'
          log_url='${{ github.event.deployment_status.log_url }}'

          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            cat <<EOF >> comment.txt
            :tada: This PR was shipped :white_check_mark:!
            - environment: $environment
            - environment url: <$environment_url>
            - commit url: <$commit_url>
            - created at: $created_at
            - updated at: $updated_at
            - log url: <$log_url>
          EOF
          elif [[ "${{ steps.status.outputs.state }}" == "failure" ]]; then
            cat <<EOF >> comment.txt
            This PR failed to ship to $environment at $updated_at ([logs]($log_url))
          EOF
          fi

          echo "text=$(cat comment.txt)" >> $GITHUB_OUTPUT
      - name: Comment PR
        shell: bash
        if: ${{ steps.comment.outputs.text != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -f comment.txt ]]; then
            for pr in $(echo '${{ steps.prs.outputs.prs }}'); do
              gh api \
                --method POST \
                -H "Accept: application/vnd.github.v3+json" \
                /repos/${{ github.repository }}/pulls/$pr/reviews \
                -f body="$(cat comment.txt)" \
                -F event=COMMENT
            done
          fi

      - name: Notify in Slack
        uses: ./.github/actions/slack
        with:
          message: $(cat comment.txt)
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}


